# This file contains the necessary patches to enable Azure Workload Identity for ArgoCD components and configure ingress with TLS.

# To mount the required secrets for entraID integration and ingress configuration we use SecretClassProvider to bootstrap the secrets, for this some extra config in argocd-server deployment is patched onto the deployment as seen below.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-server
spec:
  template:
    metadata:
      labels:
        azure.workload.identity/use: "true"
    spec:
      containers:
      - name: argocd-server
        args:
          - /usr/local/bin/argocd-server
          -  --content-security-policy=""
---
# modify application-controller StatefulSet to use workload identity
apiVersion:  apps/v1
kind: StatefulSet
metadata:
  name: argocd-application-controller
spec:
  template:
      labels:
        azure.workload.identity/use: "true"
---
# ServiceAccount for argocd-server and argocd-application-controller to use Azure Workload Identity
# Replace <ARGOCD_UMI_CLIENT_ID> with the client ID of your Azure Workload Identity application configured via terraform.
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    azure.workload.identity/client-id: <ARGOCD_UMI_CLIENT_ID>
    azure.workload.identity/tenant-id: <YOUR_TENANT_ID>
  name: argocd-server
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    azure.workload.identity/client-id: <ARGOCD_UMI_CLIENT_ID>
    azure.workload.identity/tenant-id: <YOUR_TENANT_ID>
  name: argocd-application-controller
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
 name: argocd-server-ingress
 annotations:
   ingress.kubernetes.io/force-ssl-redirect: "true"
   nginx.ingress.kubernetes.io/ssl-passthrough: "true"
   nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
spec:
 ingressClassName: <YOUR_CLASS>
 tls:
 - hosts:
   - <YOUR_HOST>
   secretName: argocd-server-tls